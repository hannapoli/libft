create .h
create main ONLY to check functions (in comments for each function for example)
Check with original funcrtions
Libft.h - comment #includes except the one we use for malloc stuff
REMEMBER Stdheader
return 1024(alpha), 8(alnum), etc.- internal classification used by the implementation of <ctype.h> functions
GIT add, commit, push!

‚Ä¢ ft_isalpha - checks for an alphabetic character. It returns a non-zero value if it‚Äôs an alphabetic character, else it returns 0. 
‚Ä¢ ft_isdigit - checks for a digit (0 through 9). It returns a non-zero value if it‚Äôs an alphabetic character, else it returns 0. 
‚Ä¢ ft_isalnum - checks for an alphanumeric character. It returns a non-zero value if it‚Äôs an alphabetic character, else it returns 0. 
‚Ä¢ ft_isascii - checks whether c is an ASCII character. 
‚Ä¢ ft_isprint - checks for any printable character including space. 
‚Ä¢ ft_strlen - calculates the length of a string. 
‚Ä¢ memset - fills  the  first  n  bytes of the memory area pointed to by s with the constant byte c. wtf??? returns a pointer to the memory area s.
‚Ä¢ bzero - function  erases  the  data  in the n bytes of the memory starting at the location pointed to by s, by writing zeros (bytes  containing '\0') to that area. Return value - none.
‚Ä¢ memcpy - copies  n bytes from memory area src to memory area dest.  The memory areas must not overlap. returns a pointer to dest
‚Ä¢ memmove - copies n bytes from memory area src to memory area dest.  The memory areas may overlap: copying takes place as though the  bytes in src are first copied into a temporary array that does not overlap src or dest, and the bytes are then copied from  the  temporary array to dest. returns a pointer to dest
‚Ä¢ ft_strlcpy - copies a string. üò≠Ô∏è
‚Ä¢ strlcat - concatenates (links together) a string. takes the full size of the buffer (not just the length) and guarantee to NUL-terminate the result. appends the NUL-terminated string src to the end of dst.  It will append at most size - strlen(dst) - 1 bytes, NUL-terminating the result. Returns the total length: initial length of dst plus the length of src. 
‚Ä¢ ft_toupper - converts lowercase letters to uppercase.
‚Ä¢ ft_tolower - converts uppercase letters to lowercase.
‚Ä¢ strchr - returns a pointer to the first occurrence of the character c in the string s or NULL if the character is not found.
‚Ä¢ strrchr - returns a pointer to the last occurrence of  the character c in the string s or NULL if the character is not found. 
‚Ä¢ strncmp - compares the two strings s1 and s2 (alphabetically?). returns an integer less than, equal to, or greater than zero if s1 (or the first n bytes thereof) is found, respectively, to be less than, to match, or be greater than s2.
‚Ä¢ memchr - scans  the  initial n bytes of the memory area pointed to by s for the first instance of c. return a pointer to the matching byte or NULL if the character does not occur in the given memory area.
‚Ä¢ memcmp - return a pointer to the matching byte or NULL if the character does not occur in the given memory area. returns  an  integer  less  than,  equal  to,  or greater than zero if the first n bytes of s1 is found, respectively, to be less than, to match, or be greater than the first n bytes of s2.
‚Ä¢ strnstr - locate a substring in a string. locates the first occurrence of the null-terminated string little in the string big, where not more than len characters are searched.  Characters that appear after a ‚Äò\0‚Äô character are not searched. If little is an empty string, big is returned; if little occurs nowhere in big, NULL is returned; otherwise a pointer to the first character of the first occurrence of little is returned.
‚Ä¢ atoi - convert a string to an integer
Para implementar estas otras dos funciones, tendr√°s que utilizar malloc():
‚Ä¢ calloc - allocates memory for an array of  nmemb  elements
       of  size bytes each and returns a pointer to the allocated memory.  The
       memory is set to zero.  If nmemb or size is 0,  then  calloc()  returns
       either  NULL,  or a unique pointer value that can later be successfully
       passed to free().  If the multiplication of nmemb and size would result
       in  integer  overflow, then calloc() returns an error.  By contrast, an
       integer overflow would not be detected in the following  call  to  mal‚Äê
       loc(),  with the result that an incorrectly sized block of memory would
       be allocated:

           malloc(nmemb * size);
           
           !!!!!!!!!!!! La siguiente
instrucci√≥n sustituye lo que puedes encontrar en la p√°gina del
manual: Si nmemb o size es 0, entonces calloc() devuelve un valor
de puntero √∫nico que m√°s tarde puede pasarse con √©xito a free().

‚Ä¢ strdup - returns a pointer to a new string which is a duplicate of the string s.  Memory for the new string  is  obtained  with malloc(3), and can be freed with free(3).  On  success,  the strdup() function returns a pointer to the duplicated string.  It returns NULL if insufficient memory was available, with errno set to indicate the cause of the error.



