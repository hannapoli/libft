header VSC Linux / Windows : Ctrl + Alt + H.
Check with original funcrtions
Libft.h - comment #includes except the one we use for malloc stuff
REMEMBER + header!!!
return 1024(alpha), 8(alnum), etc.- internal classification used by the implementation of <ctype.h> functions
GIT add, commit, push!

//Part 1:
‚Ä¢ ft_isalpha - checks for an alphabetic character. It returns a non-zero value if it‚Äôs an alphabetic character, else it returns 0. 
‚Ä¢ ft_isdigit - checks for a digit (0 through 9). It returns a non-zero value if it‚Äôs an alphabetic character, else it returns 0. 
‚Ä¢ ft_isalnum - checks for an alphanumeric character. It returns a non-zero value if it‚Äôs an alphabetic character, else it returns 0. 
‚Ä¢ ft_isascii - checks whether c is an ASCII character. It returns a non-zero value if it‚Äôs an alphabetic character, else it returns 0. 
‚Ä¢ ft_isprint - checks for any printable character including space. It returns a non-zero value if it‚Äôs an alphabetic character, else it returns 0. 
‚Ä¢ ft_strlen - calculates the length of a string. 
‚Ä¢ ft_memset - fills a block of memory with a specific value.
‚Ä¢ ft_bzero - erases  the  data by writing zeros (bytes  containing '\0') to that area. It is less common and has been substituted by memset on some systems.
‚Ä¢ ft_memcpy - copies n bytes from source memory area to destination memory area without their overlapping.
‚Ä¢ ft_memmove - copies n bytes from source memory area to destination memory area even when they overlap: copying takes place as though the bytes in src are first copied into a temporary array that does not overlap src or dest, and the bytes are then copied from  the  temporary array to dest.
‚Ä¢ ft_strlcpy - copies a string.
‚Ä¢ ft_strlcat - concatenates (links together) a string. It returns the total length: initial length of dst plus the length of src.  
‚Ä¢ ft_toupper - converts lowercase letters to uppercase.
‚Ä¢ ft_tolower - converts uppercase letters to lowercase.
‚Ä¢ ft_strchr - returns a pointer to the first occurrence of the character in the string or NULL if the character is not found. 
‚Ä¢ ft_strrchr - returns a pointer to the last occurrence of  the character c in the string s or NULL if the character is not found.  
‚Ä¢ ft_strncmp - compares two strings lexicographically. Returns an integer less than, equal to, or greater than zero if s1 is less than, equal to, or greater than s2 respectively.
‚Ä¢ ft_memchr - scans  the  initial n bytes of the memory area pointed to by a string for the first instance of a character. 
‚Ä¢ ft_memcmp - compares the first n bytes of the memory areas of strings. 
‚Ä¢ ft_strnstr - locates a substring in a string. 
‚Ä¢ ft_atoi -  convert an ASCII string to an integer.
Para implementar estas otras dos funciones, tendr√°s que utilizar malloc():
‚Ä¢ calloc üò¨Ô∏è- allocates memory for an array of  nmemb  elements
       of  size bytes each and returns a pointer to the allocated memory.  The
       memory is set to zero.  If nmemb or size is 0,  then  calloc()  returns
       either  NULL,  or a unique pointer value that can later be successfully
       passed to free().  If the multiplication of nmemb and size would result
       in  integer  overflow, then calloc() returns an error.  By contrast, an
       integer overflow would not be detected in the following  call  to  mal‚Äê
       loc(),  with the result that an incorrectly sized block of memory would
       be allocated:

           malloc(nmemb * size);
           
           !!!!!!!!!!!! La siguiente
instrucci√≥n sustituye lo que puedes encontrar en la p√°gina del
manual: Si nmemb o size es 0, entonces calloc() devuelve un valor
de puntero √∫nico que m√°s tarde puede pasarse con √©xito a free().

‚Ä¢ strdup - returns a pointer to a new string which is a duplicate of the string s.  Memory for the new string  is  obtained  with malloc(3), and can be freed with free(3).  On  success,  the strdup() function returns a pointer to the duplicated string.  It returns NULL if insufficient memory was available, with errno set to indicate the cause of the error.

+++ aditional f

